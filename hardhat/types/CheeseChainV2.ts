/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CheeseChainV2 {
  export type ParticipantStruct = {
    name: PromiseOrValue<string>;
    role: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
  };

  export type ParticipantStructOutput = [string, number, string] & {
    name: string;
    role: number;
    owner: string;
  };

  export type CoordinatesStruct = {
    latitude: PromiseOrValue<string>;
    longitude: PromiseOrValue<string>;
  };

  export type CoordinatesStructOutput = [string, string] & {
    latitude: string;
    longitude: string;
  };

  export type TestResultStruct = {
    result: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type TestResultStructOutput = [boolean, BigNumber] & {
    result: boolean;
    timestamp: BigNumber;
  };
}

export interface CheeseChainV2Interface extends utils.Interface {
  functions: {
    "addLabResult(uint256,bool)": FunctionFragment;
    "addLot(uint256[])": FunctionFragment;
    "addMilkBatch((string,string))": FunctionFragment;
    "addParticipant((string,uint8,address))": FunctionFragment;
    "addStep(uint256,(string,string))": FunctionFragment;
    "administrator()": FunctionFragment;
    "changeParticipantRole(address,uint8)": FunctionFragment;
    "isAdministrator(address)": FunctionFragment;
    "isBasicParticipant(address)": FunctionFragment;
    "isLaboratory(address)": FunctionFragment;
    "isMilkProducer(address)": FunctionFragment;
    "laboratory()": FunctionFragment;
    "lots(uint256)": FunctionFragment;
    "milkBatches(uint256)": FunctionFragment;
    "participants(address)": FunctionFragment;
    "removeParticipant(address)": FunctionFragment;
    "steps(uint256)": FunctionFragment;
    "totalBatches()": FunctionFragment;
    "totalLots()": FunctionFragment;
    "totalSteps()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLabResult"
      | "addLot"
      | "addMilkBatch"
      | "addParticipant"
      | "addStep"
      | "administrator"
      | "changeParticipantRole"
      | "isAdministrator"
      | "isBasicParticipant"
      | "isLaboratory"
      | "isMilkProducer"
      | "laboratory"
      | "lots"
      | "milkBatches"
      | "participants"
      | "removeParticipant"
      | "steps"
      | "totalBatches"
      | "totalLots"
      | "totalSteps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLabResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLot",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addMilkBatch",
    values: [CheeseChainV2.CoordinatesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addParticipant",
    values: [CheeseChainV2.ParticipantStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addStep",
    values: [PromiseOrValue<BigNumberish>, CheeseChainV2.CoordinatesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "administrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeParticipantRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdministrator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBasicParticipant",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLaboratory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMilkProducer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "laboratory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "milkBatches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeParticipant",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "steps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBatches",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalLots", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSteps",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLabResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMilkBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "administrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeParticipantRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBasicParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLaboratory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMilkProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "laboratory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "milkBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSteps", data: BytesLike): Result;

  events: {
    "LabResultAdded(uint256,bool,uint256)": EventFragment;
    "LotAdded(uint256,uint256)": EventFragment;
    "NewMilkBatch(uint256,uint256)": EventFragment;
    "ParticipantAdded(tuple)": EventFragment;
    "RoleChanged(tuple)": EventFragment;
    "StepAdded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LabResultAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMilkBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipantAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepAdded"): EventFragment;
}

export interface LabResultAddedEventObject {
  _lotId: BigNumber;
  _result: boolean;
  _timestamp: BigNumber;
}
export type LabResultAddedEvent = TypedEvent<
  [BigNumber, boolean, BigNumber],
  LabResultAddedEventObject
>;

export type LabResultAddedEventFilter = TypedEventFilter<LabResultAddedEvent>;

export interface LotAddedEventObject {
  _lotId: BigNumber;
  _timestamp: BigNumber;
}
export type LotAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LotAddedEventObject
>;

export type LotAddedEventFilter = TypedEventFilter<LotAddedEvent>;

export interface NewMilkBatchEventObject {
  _milkBatchId: BigNumber;
  _timestamp: BigNumber;
}
export type NewMilkBatchEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewMilkBatchEventObject
>;

export type NewMilkBatchEventFilter = TypedEventFilter<NewMilkBatchEvent>;

export interface ParticipantAddedEventObject {
  participant: CheeseChainV2.ParticipantStructOutput;
}
export type ParticipantAddedEvent = TypedEvent<
  [CheeseChainV2.ParticipantStructOutput],
  ParticipantAddedEventObject
>;

export type ParticipantAddedEventFilter =
  TypedEventFilter<ParticipantAddedEvent>;

export interface RoleChangedEventObject {
  participant: CheeseChainV2.ParticipantStructOutput;
}
export type RoleChangedEvent = TypedEvent<
  [CheeseChainV2.ParticipantStructOutput],
  RoleChangedEventObject
>;

export type RoleChangedEventFilter = TypedEventFilter<RoleChangedEvent>;

export interface StepAddedEventObject {
  _stepId: BigNumber;
  _timestamp: BigNumber;
}
export type StepAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StepAddedEventObject
>;

export type StepAddedEventFilter = TypedEventFilter<StepAddedEvent>;

export interface CheeseChainV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheeseChainV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLot(
      milkBatchIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMilkBatch(
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addParticipant(
      participant: CheeseChainV2.ParticipantStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    administrator(overrides?: CallOverrides): Promise<[string]>;

    changeParticipantRole(
      _address: PromiseOrValue<string>,
      _newRole: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdministrator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBasicParticipant(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLaboratory(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMilkProducer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    laboratory(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & { name: string; role: number; owner: string }
    >;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CheeseChainV2.TestResultStructOutput, BigNumber, BigNumber] & {
        testResult: CheeseChainV2.TestResultStructOutput;
        lastStep: BigNumber;
        timestamp: BigNumber;
      }
    >;

    milkBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, CheeseChainV2.CoordinatesStructOutput] & {
        timestamp: BigNumber;
        producer: string;
        coordinates: CheeseChainV2.CoordinatesStructOutput;
      }
    >;

    participants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & { name: string; role: number; owner: string }
    >;

    removeParticipant(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, CheeseChainV2.CoordinatesStructOutput] & {
        owner: string;
        previousStep: BigNumber;
        timestamp: BigNumber;
        coordinates: CheeseChainV2.CoordinatesStructOutput;
      }
    >;

    totalBatches(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLots(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSteps(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addLabResult(
    lotNumber: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLot(
    milkBatchIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMilkBatch(
    coordinates: CheeseChainV2.CoordinatesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addParticipant(
    participant: CheeseChainV2.ParticipantStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addStep(
    lotNumber: PromiseOrValue<BigNumberish>,
    coordinates: CheeseChainV2.CoordinatesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  administrator(overrides?: CallOverrides): Promise<string>;

  changeParticipantRole(
    _address: PromiseOrValue<string>,
    _newRole: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdministrator(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBasicParticipant(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLaboratory(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMilkProducer(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  laboratory(
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & { name: string; role: number; owner: string }
  >;

  lots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [CheeseChainV2.TestResultStructOutput, BigNumber, BigNumber] & {
      testResult: CheeseChainV2.TestResultStructOutput;
      lastStep: BigNumber;
      timestamp: BigNumber;
    }
  >;

  milkBatches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, CheeseChainV2.CoordinatesStructOutput] & {
      timestamp: BigNumber;
      producer: string;
      coordinates: CheeseChainV2.CoordinatesStructOutput;
    }
  >;

  participants(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string] & { name: string; role: number; owner: string }
  >;

  removeParticipant(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  steps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, CheeseChainV2.CoordinatesStructOutput] & {
      owner: string;
      previousStep: BigNumber;
      timestamp: BigNumber;
      coordinates: CheeseChainV2.CoordinatesStructOutput;
    }
  >;

  totalBatches(overrides?: CallOverrides): Promise<BigNumber>;

  totalLots(overrides?: CallOverrides): Promise<BigNumber>;

  totalSteps(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLot(
      milkBatchIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMilkBatch(
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addParticipant(
      participant: CheeseChainV2.ParticipantStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    administrator(overrides?: CallOverrides): Promise<string>;

    changeParticipantRole(
      _address: PromiseOrValue<string>,
      _newRole: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdministrator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBasicParticipant(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLaboratory(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMilkProducer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    laboratory(
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & { name: string; role: number; owner: string }
    >;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CheeseChainV2.TestResultStructOutput, BigNumber, BigNumber] & {
        testResult: CheeseChainV2.TestResultStructOutput;
        lastStep: BigNumber;
        timestamp: BigNumber;
      }
    >;

    milkBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, CheeseChainV2.CoordinatesStructOutput] & {
        timestamp: BigNumber;
        producer: string;
        coordinates: CheeseChainV2.CoordinatesStructOutput;
      }
    >;

    participants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string] & { name: string; role: number; owner: string }
    >;

    removeParticipant(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, CheeseChainV2.CoordinatesStructOutput] & {
        owner: string;
        previousStep: BigNumber;
        timestamp: BigNumber;
        coordinates: CheeseChainV2.CoordinatesStructOutput;
      }
    >;

    totalBatches(overrides?: CallOverrides): Promise<BigNumber>;

    totalLots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSteps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LabResultAdded(uint256,bool,uint256)"(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _result?: PromiseOrValue<boolean> | null,
      _timestamp?: PromiseOrValue<BigNumberish> | null
    ): LabResultAddedEventFilter;
    LabResultAdded(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _result?: PromiseOrValue<boolean> | null,
      _timestamp?: PromiseOrValue<BigNumberish> | null
    ): LabResultAddedEventFilter;

    "LotAdded(uint256,uint256)"(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): LotAddedEventFilter;
    LotAdded(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): LotAddedEventFilter;

    "NewMilkBatch(uint256,uint256)"(
      _milkBatchId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): NewMilkBatchEventFilter;
    NewMilkBatch(
      _milkBatchId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): NewMilkBatchEventFilter;

    "ParticipantAdded(tuple)"(participant?: null): ParticipantAddedEventFilter;
    ParticipantAdded(participant?: null): ParticipantAddedEventFilter;

    "RoleChanged(tuple)"(participant?: null): RoleChangedEventFilter;
    RoleChanged(participant?: null): RoleChangedEventFilter;

    "StepAdded(uint256,uint256)"(
      _stepId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): StepAddedEventFilter;
    StepAdded(
      _stepId?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): StepAddedEventFilter;
  };

  estimateGas: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLot(
      milkBatchIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMilkBatch(
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addParticipant(
      participant: CheeseChainV2.ParticipantStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    administrator(overrides?: CallOverrides): Promise<BigNumber>;

    changeParticipantRole(
      _address: PromiseOrValue<string>,
      _newRole: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdministrator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBasicParticipant(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLaboratory(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMilkProducer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    laboratory(overrides?: CallOverrides): Promise<BigNumber>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    milkBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeParticipant(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBatches(overrides?: CallOverrides): Promise<BigNumber>;

    totalLots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSteps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLot(
      milkBatchIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMilkBatch(
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addParticipant(
      participant: CheeseChainV2.ParticipantStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      coordinates: CheeseChainV2.CoordinatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    administrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeParticipantRole(
      _address: PromiseOrValue<string>,
      _newRole: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdministrator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBasicParticipant(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLaboratory(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMilkProducer(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    laboratory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    milkBatches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeParticipant(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
