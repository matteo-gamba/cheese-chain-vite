/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CheeseChain {
  export type TestResultStruct = {
    result: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type TestResultStructOutput = [boolean, BigNumber] & {
    result: boolean;
    timestamp: BigNumber;
  };
}

export interface CheeseChainInterface extends utils.Interface {
  functions: {
    "addLabResult(uint256,bool)": FunctionFragment;
    "addLot()": FunctionFragment;
    "addStep(uint256)": FunctionFragment;
    "lots(uint256)": FunctionFragment;
    "steps(uint256)": FunctionFragment;
    "totalLots()": FunctionFragment;
    "totalSteps()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLabResult"
      | "addLot"
      | "addStep"
      | "lots"
      | "steps"
      | "totalLots"
      | "totalSteps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLabResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "addLot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStep",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "steps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "totalLots", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSteps",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLabResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalLots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSteps", data: BytesLike): Result;

  events: {
    "LotAdded(uint256,uint256)": EventFragment;
    "StepAdded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LotAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepAdded"): EventFragment;
}

export interface LotAddedEventObject {
  _lotId: BigNumber;
  _timeStamp: BigNumber;
}
export type LotAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LotAddedEventObject
>;

export type LotAddedEventFilter = TypedEventFilter<LotAddedEvent>;

export interface StepAddedEventObject {
  _stepId: BigNumber;
  _timeStamp: BigNumber;
}
export type StepAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StepAddedEventObject
>;

export type StepAddedEventFilter = TypedEventFilter<StepAddedEvent>;

export interface CheeseChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheeseChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CheeseChain.TestResultStructOutput, BigNumber, BigNumber] & {
        testResult: CheeseChain.TestResultStructOutput;
        lastStep: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        previousStep: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    totalLots(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSteps(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addLabResult(
    lotNumber: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addStep(
    lotNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [CheeseChain.TestResultStructOutput, BigNumber, BigNumber] & {
      testResult: CheeseChain.TestResultStructOutput;
      lastStep: BigNumber;
      timeStamp: BigNumber;
    }
  >;

  steps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      previousStep: BigNumber;
      timeStamp: BigNumber;
    }
  >;

  totalLots(overrides?: CallOverrides): Promise<BigNumber>;

  totalSteps(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLot(overrides?: CallOverrides): Promise<void>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CheeseChain.TestResultStructOutput, BigNumber, BigNumber] & {
        testResult: CheeseChain.TestResultStructOutput;
        lastStep: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        previousStep: BigNumber;
        timeStamp: BigNumber;
      }
    >;

    totalLots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSteps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LotAdded(uint256,uint256)"(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _timeStamp?: null
    ): LotAddedEventFilter;
    LotAdded(
      _lotId?: PromiseOrValue<BigNumberish> | null,
      _timeStamp?: null
    ): LotAddedEventFilter;

    "StepAdded(uint256,uint256)"(
      _stepId?: PromiseOrValue<BigNumberish> | null,
      _timeStamp?: null
    ): StepAddedEventFilter;
    StepAdded(
      _stepId?: PromiseOrValue<BigNumberish> | null,
      _timeStamp?: null
    ): StepAddedEventFilter;
  };

  estimateGas: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSteps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLabResult(
      lotNumber: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addStep(
      lotNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    steps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
